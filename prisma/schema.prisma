generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int    @id @default(autoincrement())
  nome_role String @unique @map("nome_role") @db.VarChar(50)
  users     User[]

  @@map("role")
}

model User {
  id               Int                @id @default(autoincrement())
  nome             String             @db.VarChar(95)
  esta_bloqueado   Boolean            @default(false)
  password_hash    String?            @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  telefone         String?            @db.VarChar(20)
  codigo_postal    String?            @db.VarChar(8)
  endereco         String?            @db.VarChar(255)
  role_id          Int?
  role             Role?              @relation(fields: [role_id], references: [role_id], onDelete: SetNull, onUpdate: Cascade)
  tokens           TokenPass[]
  registros        Registro[]
  casos            Caso[]  @relation(name: "CasosColaborador")
  HorasTrabalhadas HorasTrabalhadas[]
  casos_colaborando Caso[]

  Evento                 Evento[] @relation("EventoColaboradores")
  Eventos                Evento[]             
  notificacoes_recebidas NotificacaoRecebida[]
  notificacoes_criadas   Notificacao[]         @relation("NotificacaoCriador")
  Notificacao Notificacao[]

  @@map("utilizador")
}

model Cliente {
  id           Int            @id @default(autoincrement())
  nome         String         @db.VarChar(100)
  email        String         @unique @db.VarChar(255)
  telefone     String         @db.VarChar(20)
  codigoPostal String         @db.VarChar(10)
  endereco     String         @db.VarChar(255)
  casos        Caso[] // Relação através da tabela de junção
  dividas      Divida[]

  @@map("cliente")
}

model TokenPass {
  id      Int    @id @default(autoincrement())
  token   String @unique @default(cuid()) @db.VarChar(25)
  user_id Int
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Registro {
  id         Int         @id @default(autoincrement())
  resumo     String      @db.VarChar(255)
  descricao  String?     @db.Text
  tipo       String      @db.VarChar(50)
  criado_em  DateTime    @default(now())
  user_id    Int
  caso_id    Int
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  caso       Caso        @relation(fields: [caso_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentos Documento[]

  @@map("registro")
}

model CasoEstado {
  id          Int    @id @default(autoincrement())
  nome_estado String @unique @map("nome_role") @db.VarChar(50)
  casos       Caso[]

  @@map("casoestado")
}

model HorasTrabalhadas {
  id      Int      @id @default(autoincrement())
  horas   Float    @db.Float
  descricao String? @db.Text
  data    DateTime @default(now())
  caso_id Int
  caso    Caso     @relation(fields: [caso_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("horas_trabalhadas")
}

model Caso {
  id                Int                @id @default(autoincrement())
  processo          String             @unique @db.VarChar(50)
  resumo            String             @db.VarChar(100)
  descricao         String?            @db.Text
  criado_em         DateTime           @default(now())
  
  user_id           Int
  user              User               @relation(name: "CasosColaborador", fields: [user_id], references: [id])

  estado_id         Int                @default(1)
  estado            CasoEstado         @relation(fields: [estado_id], references: [id])

  registros        Registro[]
  Evento           Evento[]           @relation("EventoCasos")
  dividas          Divida[]
  HorasTrabalhadas HorasTrabalhadas[]
  colaboradores     User[]
  clientes          Cliente[]    // Relação muitos-para-muitos

  @@map("caso")
}



model Documento {
  id          Int      @id @default(autoincrement())
  nome        String   @db.VarChar(255)
  caminho     String   @db.VarChar(512)
  tipo        String   @db.VarChar(50)
  tamanho     Int
  public_id   String?  @db.VarChar(255)
  criado_em   DateTime @default(now())
  registro_id Int
  registro    Registro @relation(fields: [registro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("documento")
}


model Evento {
  id            String     @id @default(cuid())
  tipo          TipoEvento @default(EVENTO)
  titulo        String     @db.VarChar(64)
  descricao     String?    @db.Text
  data          DateTime   @default(now())
  criado_em     DateTime   @default(now())
  atualizado_em DateTime   @updatedAt
  local         String?    @db.VarChar(255)

  // Relacionamentos
  user_id Int
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  casos   Caso[]   @relation("EventoCasos")
  users   User[]   @relation("EventoColaboradores")

  @@map("evento")
}

enum TipoEvento {
  EVENTO
  COMPROMISSO
  PRAZO_PROCESSUAL
}

model Divida {
  id            Int      @id @default(autoincrement())
  valor         Float    @db.Float @default(0)
  assunto       String   @db.VarChar(255)  // Campo adicionado para descrever o motivo da dívida
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt
  pago          Boolean  @default(false)
  cliente_id    Int
  cliente       Cliente  @relation(fields: [cliente_id], references: [id])

  caso_id       Int
  caso          Caso     @relation(fields: [caso_id], references: [id])

  @@map("divida")
}

model Notificacao {
  id        Int             @id @default(autoincrement())
  titulo    String          @db.VarChar(255)
  mensagem  String          @db.Text
  tipo      TipoNotificacao @default(GERAL)
  criado_em DateTime        @default(now())

  criador_id Int?
  criador    User? @relation("NotificacaoCriador", fields: [criador_id], references: [id])

  receptores NotificacaoRecebida[]
  User       User?                 @relation(fields: [userId], references: [id])
  userId     Int?

  @@map("notificacao")
}

model NotificacaoRecebida {
  id             Int      @id @default(autoincrement())
  user_id        Int
  notificacao_id Int
  lida           Boolean  @default(false)
  recebida_em    DateTime @default(now())

  user        User        @relation(fields: [user_id], references: [id])
  notificacao Notificacao @relation(fields: [notificacao_id], references: [id])

  @@unique([user_id, notificacao_id])
  @@map("notificacao_recebida")
}

enum TipoNotificacao {
  GERAL
  SISTEMA
  EVENTO
  PRAZO
  ALERTA
  FINANCEIRO
  USUARIO
}
